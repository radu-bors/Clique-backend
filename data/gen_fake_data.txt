I need your help to create some fake data as csv file. Each file contains data that is meant to populate an SQL table in the same database.

Here is the first table. Create 100 entries with ages between 18 and 50. The location should be in Berlin, Germany. The birthday should be in the "DD-MM-YYYY" format.
1. Table name: Users
2. Fields:
- Name: string. The name should match the gender. Use gender-neutral names if the gender is "other"
- Birthdate: date
- Gender: string. Can be "male", "female" or "other"
- Location: 2 floats (coordinates), in Berlin, Germany.
- UID: string, unique, primary key
- Last online: timestamp in the format "YYYY-MM-DD HH:MI:SS". All values should be from the past week (today is 3rd August 2023).


Next table is a table of activities that user can organize. The possible activities are tennis, badminton, chess, biking, cooking and drinking
Table name: Activities
Fields:
- activity_name: string
- activity_id: string, unique, primary key

The next table is a table of events. An event is a particular instance of an activity that a user creates. Create 50 events.
Table name: Events
Fields:
- event_id: string, unique, primary key
- activity_id: string, linked to the field with the same name from the Activities table.
- initiated_by: string, this is the UID of the user who started an activity. It should be a real value from the Users table.
- location: coordinates, should be in Berlin, Germany
- min_age: integer, minimum age for participants, it's selected by the user who initiated the event
- max_age: integer, maximum age for participants, it's selected by the user who initiated the event
- pref_gender: string. should be one or more of the possible values for gender from the User table. For example "male, other".
- description: string. This is a description written by the user who initiated the event. It should be very friendly and inviting. It should describe the users as a person and what the event is about. Make them sound similar to tinder descriptions. Unique and quirky. Give the appearance of real users.
- is_open: boolean, depending on whether the event still accepts participants or not.
- initiated_on: timestamp, the date on which the event was intiated in the format "YYYY-MM-DD HH:MI:SS"

The next table is a table of matches. A match is a connection between two users and happens when a user requests to participate in an event created by another user.
Table name: Matches
Fields:
- event_id: string, this is one of the values of the field with same name from Events table
- creator: this is the UID of the user who created the event. It should be the same as the initiated_by from Events table for the specific event_id
- participant: this is the UID of a user who requested to participate in the event
- match: this is a boolean, depending on whether the participant is accepted or not
- chat_id: string, this is an ID of the chat between two users. Rows have the same chat_id if the users chatting are the same, regardless if creator and participant are reversed, or if the event is a different one.
- chat_block: string composed of multiple messages between the two users. Fake the conversations, but limit it to maximum 10 messages exchanged between the two.
Make multiple participants (2 - 5) for each event. Only one participant can be accepted for an event. Users who are participant should fulfill the min_age, max_age and gender requirements for the event they want to participate in. Combinations of participant and event_id should be unique.

The last table is Chats and stores chat messages between users. The messages are the same found in the Matches tables, but Chats contains more information. Each row in Chats is a message between two users. The fields are:
- chat_id: string, the same as chat_id in Matches
- text: string, this is one message which is part of the chat between two users. A full conversation is made of multiple messages.
- datetime: timestamp for when the message was sent in the format "YYYY-MM-DD HH:MI:SS"
- sender: UID of the user who sent the message.
- recipient: UID of the recipient
The sender and recipient, together with the message should match the data in Matches tables. Except that each string in a record from chat_block should be a separate record in the Chats table. It may be easier if you create the Chats table before populating the chat_block column of the Matches table.
